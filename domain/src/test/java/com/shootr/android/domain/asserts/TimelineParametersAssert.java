package com.shootr.android.domain.asserts;

import com.shootr.android.domain.TimelineParameters;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link TimelineParameters} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TimelineParametersAssert extends AbstractAssert<TimelineParametersAssert, TimelineParameters> {

    /**
     * Creates a new <code>{@link TimelineParametersAssert}</code> to make assertions on actual TimelineParameters.
     *
     * @param actual the TimelineParameters we want to make assertions on.
     */
    public TimelineParametersAssert(TimelineParameters actual) {
        super(actual, TimelineParametersAssert.class);
    }

    /**
     * An entry point for TimelineParametersAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myTimelineParameters)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the TimelineParameters we want to make assertions on.
     * @return a new <code>{@link TimelineParametersAssert}</code>
     */
    public static TimelineParametersAssert assertThat(TimelineParameters actual) {
        return new TimelineParametersAssert(actual);
    }

    /**
     * Verifies that the actual TimelineParameters's eventAuthorId is equal to the given one.
     *
     * @param eventAuthorId the given eventAuthorId to compare the actual TimelineParameters's eventAuthorId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's eventAuthorId is not equal to the given one.
     */
    public TimelineParametersAssert hasEventAuthorId(Long eventAuthorId) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected eventAuthorId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualEventAuthorId = actual.getEventAuthorId();
        if (!Objects.areEqual(actualEventAuthorId, eventAuthorId)) {
            failWithMessage(assertjErrorMessage, actual, eventAuthorId, actualEventAuthorId);
        }

        // return the current assertion for method chaining
        return this;
    }

    public TimelineParametersAssert hasNoEventAuthorId() {
        isNotNull();

        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have eventAuthorId but had :\n  <%s>";

        // check
        if (actual.getEventAuthorId() != null) {
            failWithMessage(assertjErrorMessage, actual, actual.getEventAuthorId());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters's eventId is equal to the given one.
     *
     * @param eventId the given eventId to compare the actual TimelineParameters's eventId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's eventId is not equal to the given one.
     */
    public TimelineParametersAssert hasEventId(Long eventId) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected eventId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualEventId = actual.getEventId();
        if (!Objects.areEqual(actualEventId, eventId)) {
            failWithMessage(assertjErrorMessage, actual, eventId, actualEventId);
        }

        // return the current assertion for method chaining
        return this;
    }

    public TimelineParametersAssert hasNoEventId() {
        isNotNull();

        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have eventId but had :\n  <%s>";

        // check
        if (actual.getEventId() != null) {
            failWithMessage(assertjErrorMessage, actual, actual.getEventId());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters's maxDate is equal to the given one.
     *
     * @param maxDate the given maxDate to compare the actual TimelineParameters's maxDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's maxDate is not equal to the given one.
     */
    public TimelineParametersAssert hasMaxDate(java.util.Date maxDate) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected maxDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualMaxDate = actual.getMaxDate();
        if (!Objects.areEqual(actualMaxDate, maxDate)) {
            failWithMessage(assertjErrorMessage, actual, maxDate, actualMaxDate);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters's sinceDate is equal to the given one.
     *
     * @param sinceDate the given sinceDate to compare the actual TimelineParameters's sinceDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's sinceDate is not equal to the given one.
     */
    public TimelineParametersAssert hasSinceDate(Long sinceDate) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected sinceDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualSinceDate = actual.getSinceDate();
        if (!Objects.areEqual(actualSinceDate, sinceDate)) {
            failWithMessage(assertjErrorMessage, actual, sinceDate, actualSinceDate);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters's userIds contains the given Long elements.
     *
     * @param userIds the given elements that should be contained in actual TimelineParameters's userIds.
     * @return this assertion object.
     * @throws AssertionError if the actual TimelineParameters's userIds does not contain all given Long elements.
     */
    public TimelineParametersAssert hasUserIds(Long... userIds) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Long varargs is not null.
        if (userIds == null) throw new AssertionError("Expecting userIds parameter not to be null.");

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getUserIds(), userIds);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters has no userIds.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual TimelineParameters's userIds is not empty.
     */
    public TimelineParametersAssert hasNoUserIds() {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have userIds but had :\n  <%s>";

        // check
        if (actual.getUserIds().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getUserIds());
        }

        // return the current assertion for method chaining
        return this;
    }
}
