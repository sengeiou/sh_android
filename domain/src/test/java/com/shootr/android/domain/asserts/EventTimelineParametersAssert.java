package com.shootr.android.domain.asserts;

import com.shootr.android.domain.EventTimelineParameters;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link EventTimelineParameters} specific assertions - Generated by CustomAssertionGenerator.
 */
public class EventTimelineParametersAssert extends AbstractAssert<EventTimelineParametersAssert, EventTimelineParameters> {

    /**
     * Creates a new <code>{@link EventTimelineParametersAssert}</code> to make assertions on actual TimelineParameters.
     *
     * @param actual the TimelineParameters we want to make assertions on.
     */
    public EventTimelineParametersAssert(EventTimelineParameters actual) {
        super(actual, EventTimelineParametersAssert.class);
    }

    /**
     * An entry point for TimelineParametersAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myTimelineParameters)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the TimelineParameters we want to make assertions on.
     * @return a new <code>{@link EventTimelineParametersAssert}</code>
     */
    public static EventTimelineParametersAssert assertThat(EventTimelineParameters actual) {
        return new EventTimelineParametersAssert(actual);
    }

    /**
     * Verifies that the actual TimelineParameters's eventId is equal to the given one.
     *
     * @param eventId the given eventId to compare the actual TimelineParameters's eventId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's eventId is not equal to the given one.
     */
    public EventTimelineParametersAssert hasEventId(String eventId) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected eventId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualEventId = actual.getEventId();
        if (!Objects.areEqual(actualEventId, eventId)) {
            failWithMessage(assertjErrorMessage, actual, eventId, actualEventId);
        }

        // return the current assertion for method chaining
        return this;
    }

    public EventTimelineParametersAssert hasNoEventId() {
        isNotNull();

        String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have eventId but had :\n  <%s>";

        // check
        if (actual.getEventId() != null) {
            failWithMessage(assertjErrorMessage, actual, actual.getEventId());
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters's maxDate is equal to the given one.
     *
     * @param maxDate the given maxDate to compare the actual TimelineParameters's maxDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's maxDate is not equal to the given one.
     */
    public EventTimelineParametersAssert hasMaxDate(java.util.Date maxDate) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected maxDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualMaxDate = actual.getMaxDate();
        if (!Objects.areEqual(actualMaxDate, maxDate)) {
            failWithMessage(assertjErrorMessage, actual, maxDate, actualMaxDate);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual TimelineParameters's sinceDate is equal to the given one.
     *
     * @param sinceDate the given sinceDate to compare the actual TimelineParameters's sinceDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual TimelineParameters's sinceDate is not equal to the given one.
     */
    public EventTimelineParametersAssert hasSinceDate(Long sinceDate) {
        // check that actual TimelineParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected sinceDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualSinceDate = actual.getSinceDate();
        if (!Objects.areEqual(actualSinceDate, sinceDate)) {
            failWithMessage(assertjErrorMessage, actual, sinceDate, actualSinceDate);
        }

        // return the current assertion for method chaining
        return this;
    }

}
