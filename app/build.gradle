buildscript {

    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.0'
        classpath 'com.amazonaws:aws-android-sdk-s3:2.2.3'
        classpath 'io.fabric.tools:gradle:1.19.2'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'hugo'
apply plugin: "sonar-runner"
apply plugin: 'maven'


repositories {
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()

def versionMajor = 0
def versionMinor = 1
def versionRevision = 27
def isSnapshot = false
def databaseVersion = 9

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.shootr.android"
        minSdkVersion 14
        targetSdkVersion 22

        versionCode versionMajor * 1000000 + versionMinor * 1000 + versionRevision
        versionName versionMajor + "." + versionMinor + "." + versionRevision
        versionName isSnapshot ? versionName + "-SNAPSHOT" : versionName
        archivesBaseName = "Shootr-" + versionName

        resConfigs "es", "en"
        resConfigs "hdpi", "xhdpi", "xxhdpi"

        buildConfigField "Integer", "DATABASE_VERSION", databaseVersion.toString()
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "GIT_BRANCH", "\"${gitBranch}\""
    }

    signingConfigs {
        release {
            storeFile file('../certs/release.keystore')
            def (releaseKeystorePassword, releaseKeyAlias, releaseKeyPassword) = signingConfig()
            storePassword releaseKeystorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }

        debug {
            storeFile file('../certs/debug.keystore')
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug

            buildConfigField "String", "API_ENDPOINT_BASE", "\"http://tst.api.shootr.com/v1\""
            buildConfigField "String", "RESOURCES_ENDPOINT_BASE", "\"http://resources.tst.shootr.com/\""

        }
        release {
            minifyEnabled false //TODO configurarlo y activarlo
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "API_ENDPOINT_BASE", "\"http://api.shootr.com/v1\""
            buildConfigField "String", "RESOURCES_ENDPOINT_BASE", "\"http://resources.pro.shootr.com/\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }
}

dependencies {
    compile project(':domain')

    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.google.android.gms:play-services-base:6.5.87'
    compile 'com.android.support:support-annotations:22.2.0'

    compile 'com.sloydev:jsonadapters-core:0.1.0'
    compile 'com.sloydev:jsonadapters-gson:0.1.1'

    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'

    compile 'com.squareup:otto:1.3.4'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'

    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.timber:timber:2.4.1'

    compile 'com.path:android-priority-jobqueue:1.1.2'
    compile 'de.hdodenhof:circleimageview:1.2.0'
    compile 'com.github.dmytrodanylyk.circular-progress-button:library:1.1.3'

    compile 'com.squareup.retrofit:retrofit:1.9.0'
    debugCompile 'com.squareup.retrofit:retrofit-mock:1.9.0'

    compile 'joda-time:joda-time:2.3'

    compile 'com.cocosw:bottomsheet:0.6@aar'

    compile 'com.github.chrisbanes.photoview:library:1.2.3'

    compile 'com.melnykov:floatingactionbutton:1.1.0'

    compile 'com.facebook.android:facebook-android-sdk:4.1.0'

    compile 'com.facebook.stetho:stetho:1.1.0'
    compile 'com.facebook.stetho:stetho-okhttp:1.1.0'

    compile 'cat.ereza:customactivityoncrash:1.4.0'

    compile 'com.github.paolorotolo:appintro:3.2.0'

    compile 'com.sloydev:collapsingavatartoolbar:1.1.0'

    compile 'com.github.bumptech.glide:glide:3.6.1'

    debugCompile 'com.github.pedrovgs:lynx:1.4'
    compile 'com.sloydev:okresponsefaker:1.0.0'
    compile 'com.sloydev:okresponsefaker-json:1.0.0'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile 'org.assertj:assertj-core:1.7.0'
    androidTestCompile('com.squareup.assertj:assertj-android:1.0.0') {
        exclude group: 'com.android.support'
    }

    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }
}

/**
 * Tries to read signing values form a properties file, and fallbacks to environment variables if they are not found
 * @return keystorePassword , keyAlias, keyPassword
 */
def signingConfig() {
    signingConfigFromFile() ?: signinConfigFromEnvironment()
}

/**
 * Reads signing values form a environment variables
 * @return keystorePassword , keyAlias, keyPassword
 */
def signinConfigFromEnvironment() {
    println '-> signinConfigFromEnvironment'
    [System.getenv('STORE_PASSWORD'), System.getenv('KEY_ALIAS'), System.getenv('KEY_PASSWORD')]
}

/**
 * Reads signing values form a properties file
 * @return keystorePassword , keyAlias, keyPassword
 */
def signingConfigFromFile() {
    println '-> signingConfigFromFile'
    def Properties props = new Properties()
    def propFile = file('signing.properties')

    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null &&
          props.containsKey('STORE_PASSWORD') &&
          props.containsKey('KEY_ALIAS') &&
          props.containsKey('KEY_PASSWORD')) {

            def keystorePassword = props['STORE_PASSWORD']
            def keyAlias = props['KEY_ALIAS']
            def keyPassword = props['KEY_PASSWORD']

            return [keystorePassword, keyAlias, keyPassword]
        } else {
            println 'signing.properties found but some entries are missing'
        }
    } else {
        println 'signing.properties not found'
    }
    return null
}

sonarRunner {
    sonarProperties {
        property "sonar.projectKey", "Android_build:app"
        property "sonar.host.url", "http://sonar.fav24.net"
        property "sonar.jdbc.url",
          "jdbc:mysql://gm-ci-environment.cttjtyko7rpp.eu-west-1.rds.amazonaws.com:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
        property "sonar.login", "admin"
        property "sonar.password", "14041981"
        property "sonar.projectName", "Shootr Android"
        property "sonar.projectVersion", android.defaultConfig.versionName
        properties["sonar.sources"] = android.sourceSets.main.java.srcDirs
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://nexus.fav24.net/content/repositories/snapshots/") {
                authentication(userName: "deployment", password: "deployment123")
            }
            pom.version = android.defaultConfig.versionName
            pom.artifactId = 'Shootr'
            pom.groupId = "com.shooter.android"
            uniqueVersion = false
        }
    }
}


//TODO Wrap this thing into an indepentent plugin
import com.amazonaws.auth.BasicAWSCredentials
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.services.s3.model.ObjectMetadata
import com.amazonaws.services.s3.model.PutObjectRequest

def publishAllTask = project.tasks.create("publishAllApksToS3")
android.applicationVariants.all { variant ->
    def task = project.tasks.create("publish${variant.name.capitalize()}ApkToS3") << {

        def keyId = System.getenv('AWS_S3_KEY_ID')
        def keySecret = System.getenv('AWS_S3_KEY_SECRET')

        if (!keyId || !keySecret) {
            throw new GradleException("Please set AWS_S3_KEY_ID and AWS_S3_KEY_SECRET properties.")
        }
        def bucket = "shootr-android-distribution"
        def File apkFile = variant.outputs[0].outputFile
        println 'apkFile: ' + apkFile

        def contentType = "application/vnd.android.package-archive"

        AmazonS3 s3client = new AmazonS3Client(new BasicAWSCredentials(keyId, keySecret));

        def request = new PutObjectRequest(bucket, apkFile.getName(), apkFile)

        def metadata = new ObjectMetadata()
        metadata.setContentType(contentType)
        request.setMetadata(metadata)

        s3client.putObject(request)

        // Optional
        def requestLatest = new PutObjectRequest(bucket, "Shootr-latest.apk", apkFile)
        requestLatest.setMetadata(metadata)
        s3client.putObject(requestLatest)
    }

    task.dependsOn variant.assemble
    publishAllTask.dependsOn task
}